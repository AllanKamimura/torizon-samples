image: docker:latest

services:
  - name: docker:dind

variables:
  DEBIAN_RELEASE: "bullseye"

  # container version
  DEBIAN_MAJOR: "2"
  DEBIAN_MINOR: "5"
  DEBIAN_PATCH: "0"

  DEBIAN_SHELL_MAJOR: "2"
  DEBIAN_SHELL_MINOR: "5"
  DEBIAN_SHELL_PATCH: "0"

  WAYLAND_BASE_MAJOR: "2"
  WAYLAND_BASE_MINOR: "5"
  WAYLAND_BASE_PATCH: "0"

  WESTON_MAJOR: "2"
  WESTON_MINOR: "7"
  WESTON_PATCH: "0"

  QT5_WAYLAND_MAJOR: "2"
  QT5_WAYLAND_MINOR: "7"
  QT5_WAYLAND_PATCH: "0"

  QT5_WAYLAND_EXAMPLES_MAJOR: "2"
  QT5_WAYLAND_EXAMPLES_MINOR: "7"
  QT5_WAYLAND_EXAMPLES_PATCH: "0"

  WAYLAND_BASE_VIVANTE_MAJOR: "2"
  WAYLAND_BASE_VIVANTE_MINOR: "5"
  WAYLAND_BASE_VIVANTE_PATCH: "0"

  WESTON_VIVANTE_MAJOR: "2"
  WESTON_VIVANTE_MINOR: "7"
  WESTON_VIVANTE_PATCH: "0"

  QT5_WAYLAND_VIVANTE_MAJOR: "2"
  QT5_WAYLAND_VIVANTE_MINOR: "7"
  QT5_WAYLAND_VIVANTE_PATCH: "0"

  QT5_WAYLAND_EXAMPLES_VIVANTE_MAJOR: "2"
  QT5_WAYLAND_EXAMPLES_VIVANTE_MINOR: "7"
  QT5_WAYLAND_EXAMPLES_VIVANTE_PATCH: "0"

  WESTON_TOUCH_CALIBRATOR_MAJOR: "2"
  WESTON_TOUCH_CALIBRATOR_MINOR: "6"
  WESTON_TOUCH_CALIBRATOR_PATCH: "0"

  GRAPHICS_TESTS_MAJOR: "2"
  GRAPHICS_TESTS_MINOR: "5"
  GRAPHICS_TESTS_PATCH: "0"

  GRAPHICS_TESTS_VIVANTE_MAJOR: "2"
  GRAPHICS_TESTS_VIVANTE_MINOR: "4"
  GRAPHICS_TESTS_VIVANTE_PATCH: "0"

  CHROMIUM_MAJOR: "2"
  CHROMIUM_MINOR: "5"
  CHROMIUM_PATCH: "0"

  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

  DEBIAN_DOCKER_REGISTRY: ${CI_REGISTRY}/rd/torizon-core-containers/debian-docker-images
  CROSS_TC_DOCKER_REGISTRY: ${CI_REGISTRY}/rd/torizon-core-containers/debian-cross-toolchains
  KIOSK_DOCKER_REGISTRY: ${CI_REGISTRY}/rd/torizon-core-containers/kiosk-mode-browser

# Scripts

# Dockerfile linter

.dockerfile-lint:
  image: hadolint/hadolint:latest-debian
  script:
    # Some rules cannot be applied in our specific cases.
    # However, since we don't want to completely ignore these rules,
    # we are changing the following rules to have the level "info":
    #- DL3003 warning: Use WORKDIR to switch to a directory
    #- DL3008 warning: Pin versions in apt get install. Instead of `apt-get install <package>` use `apt-get install <package>=<version>`
    #- DL3013 warning: Pin versions in pip. Instead of `pip install <package>` use `pip install <package>==<version>` or `pip install --requirement <requirements file>`
    #- DL3029 warning: Do not use --platform flag with FROM
    #- DL4006 warning: Set the SHELL option -o pipefail before RUN with a pipe in it. If you are using /bin/sh in an alpine image or if your shell is symlinked to busybox then consider explicitly setting your SHELL to /bin/ash, or disable this check
    - hadolint ${DOCKERFILE_FOLDER}/Dockerfile* --failure-threshold warning --info DL3003 --info DL3008 --info DL3013 --info DL3029 --info DL4006

# Repository tagging

# Make sure to create access token in "Settings/Access Tokens" section with "write_repository" scope selected.
# Then in "Settings/CI/CD/" section add a variable with key "GIT_TOKEN" and a value of the access token. Also mask the variable.
.tag:
  stage: repository tagging
  needs: []
  before_script:
    - if [ -z ${GIT_TOKEN} ]; then echo "Missing variable GIT_TOKEN." && exit 1; fi
  script:
  - apk update && apk add git
  - TAGS="${SAMPLE_NAME}-${MAJOR}.${MINOR}.${PATCH}-${DEBIAN_RELEASE}"
  - git remote set-url origin https://gitlab-ci-token:${GIT_TOKEN}@${CI_REPOSITORY_URL#*@}
  - for TAG in ${TAGS};
      do
        if git ls-remote --tags origin  | grep ${TAG} > /dev/null; then
          echo "${TAG} tag already exists.";
        else
          echo "Tagging repository with ${TAG} tag.";
          git tag --delete ${TAG} > /dev/null 2>&1 || true;
          git tag ${TAG};
          git push -o ci.skip origin ${TAG};
        fi
      done

# Docker image build scripts
#
# Build the Docker images specificd in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  variables:
    IMAGE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
    IMAGE_ARCH: linux/arm
    ADD_TORADEX_REPOSITORY: 1
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker info
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - docker pull ${CI_REGISTRY}/rd/torizon-core/samples/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - export DATE=$(date +%Y%m%d)
    # Ignore error "sh: write error: File exists" when installing qemu-user-static
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes || true
    - docker build --build-arg IMAGE_ARCH=${IMAGE_ARCH}
                     --build-arg DOCKER_REGISTRY=${DEBIAN_DOCKER_REGISTRY}
                     --build-arg KIOSK_DOCKER_REGISTRY=${KIOSK_DOCKER_REGISTRY}
                     --build-arg CROSS_TC_DOCKER_REGISTRY=${CROSS_TC_DOCKER_REGISTRY}
                     --build-arg BASE_NAME=${BASE_NAME}
                     --build-arg IMAGE_TAG=${IMAGE_TAG}
                     --build-arg GCC_PREFIX=${GCC_PREFIX}
                     --build-arg CROSS_TC_IMAGE_ARCH=${CROSS_TC_IMAGE_ARCH}
                     --build-arg CROSS_TC_IMAGE_TAG=${CROSS_TC_IMAGE_TAG}
                     --build-arg TOOLCHAIN_ARCH=${TOOLCHAIN_ARCH}
                     --build-arg PKG_ARCH=${PKG_ARCH}
                     --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     --cache-from ${CI_REGISTRY}/rd/torizon-core/samples/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     ${DOCKER_NO_CACHE:+--no-cache}
                     --label container.name=${IMAGE_NAME} 
                     --label container.version=${MAJOR}.${MINOR}.${PATCH}-${DATE} 
                     --label git.branch=${CI_COMMIT_BRANCH}  
                     --label git.hash=${CI_COMMIT_SHA} 
                     --label pipeline.id=${CI_PIPELINE_ID} 
                     -f ${DOCKERFILE_FOLDER}Dockerfile
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     ${DOCKERFILE_FOLDER}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

.do_docker_experimental: &do_docker_experimental
  # Enable experimental features in Docker client (experimental feature are needed for manifest)
    - mkdir -p $HOME/.docker
    - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
    - docker version

.docker-build-multiarch:
  before_script:
    - *do_docker_experimental
    - rm -rf ~/.docker/manifests/*
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker manifest create ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${GITLAB_DOCKERREGISTRY_SUFFIX}  --os linux --arch arm
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${GITLAB_DOCKERREGISTRY_SUFFIX}  --os linux --arch arm64
  - docker manifest inspect -v ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
  - docker manifest push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

# Docker deploy scripts
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_TOKEN is properly set in the project
# specific Gitlab CI settings.

# Only a few samples are published to Docker Hub, therefore not every container
# built internally has a deploy stage.
.docker-deploy:
  when: manual
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}${DEBIAN_RELEASE_APPEND}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND}
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
    - docker push --all-tags ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}

.docker-deploy-multiarch:
  when: manual    
  script:
    - mkdir -p $HOME/.docker
    - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
    - docker version
    - rm -rf ~/.docker/manifests/*
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
    # docker manifest push does not have "--all-tags" option, must push one-by-one
    # Major
    - docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}${DEBIAN_RELEASE_APPEND}
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}${DEBIAN_RELEASE_APPEND}  --os linux --arch arm
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}${DEBIAN_RELEASE_APPEND}  --os linux --arch arm64
    - docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}${DEBIAN_RELEASE_APPEND}
    - docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}${DEBIAN_RELEASE_APPEND}
    # Minor
    - docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND}
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND}  --os linux --arch arm
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND}  --os linux --arch arm64
    - docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND}
    - docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}${DEBIAN_RELEASE_APPEND}
    # Patch
    - docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND}
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND} --os linux --arch arm
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND} --os linux --arch arm64
    - docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND}
    - docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}${DEBIAN_RELEASE_APPEND}
    # Patch date
    - docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND}
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND} --os linux --arch arm
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND} --os linux --arch arm64
    - docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND}
    - docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}${DEBIAN_RELEASE_APPEND}